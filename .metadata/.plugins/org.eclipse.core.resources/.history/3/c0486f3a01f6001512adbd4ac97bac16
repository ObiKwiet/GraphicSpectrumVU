#include "edma_init.h"

// Private Globals
static uint16_t sampleBuffer[3][BUF_SIZE];

static struct sBufferIdx {
	uint16_t activeBuffer;
	uint16_t lowerBuffer;
	uint16_t upperBuffer;
} sBufferIdx = {
		.activeBuffer = 0,
		.lowerBuffer = 1,
	    .upperBuffer = 2
};

static struct Chn_State {
edma_chn_state_t chn0;
edma_chn_state_t chn1;
} Chn_State;

static struct stcd {
edma_software_tcd_t chn0;
edma_software_tcd_t chn1;
} stcd;

static uint8_t bufferStatus = 0;

/**********************************************************
 Configures eDMA channel 0 to transfer ADC0 samples to the
 "Upper" buffer. When the buffer is full, this channel generates
 and interrupt.
 **********************************************************/

void config_DMA_Upper(void) {

    Chn_State.chn0.channel = kEDMAChannel0;

    edma_user_config_t edmaUserConfig0;
    edmaUserConfig0.chnArbitration = kEDMAChnArbitrationRoundrobin;
    edmaUserConfig0.notHaltOnError = false;

    edma_state_t edmaState0; //Maybe don't need this?

    EDMA_DRV_Init(&edmaState0, &edmaUserConfig0);

    //Request DMA0 - Triggered by ADC0//
    EDMA_DRV_RequestChannel(kEDMAChannel0, kDmaRequestMux0ADC0, &Chn_State.chn0);

    /*********** Configure DMA Channel 0 **************************/
    edma_transfer_config_t edmaTXcfg0;

    edmaTXcfg0.srcAddr = (uint32_t)(&ADC0_RA);     /*!< Memory address pointing to the source data. */
    edmaTXcfg0.destAddr = (uint32_t)(&sampleBuffer[sBufferIdx.upperBuffer][BUF_SIZE/2]);   /*!< Memory address pointing to the destination data. */
    edmaTXcfg0.srcTransferSize = kEDMATransferSize_2Bytes;   /*!< Source data transfer size. */
    edmaTXcfg0.destTransferSize = kEDMATransferSize_2Bytes;  /*!< Destination data transfer size. */
    edmaTXcfg0.srcOffset = 0;         /*!< Sign-extended offset applied to the current source address to
                                        form the next-state value as each source read/write is completed. */
    edmaTXcfg0.destOffset = 2;
    edmaTXcfg0.srcLastAddrAdjust = 0;    /*!< Last source address adjustment. */
    edmaTXcfg0.destLastAddrAdjust = -BUF_SIZE;   /*!< Last destination address adjustment. Note here it is only
                                                valid when scatter/gather feature is not enabled. */
    edmaTXcfg0.srcModulo = kEDMAModuloDisable;       /*!< Source address modulo. */
    edmaTXcfg0.destModulo = kEDMAModuloDisable;       /*!< Destination address modulo. */
    edmaTXcfg0.minorLoopCount = 2;    /*!< Minor bytes transfer count. Number of bytes to be transferred
                                             in each service request of the channel. */
    edmaTXcfg0.majorLoopCount = BUF_SIZE/2;    /*!< Major iteration count. */

    /*Channel - DMA 0. (false) - No interrupt on TCD Complete; (true) DMA request on TCD complete is disabled */
    EDMA_DRV_PrepareDescriptorTransfer(&Chn_State.chn0, &stcd.chn0, &edmaTXcfg0, false, true);
    EDMA_DRV_PushDescriptorToReg(&Chn_State.chn0, &stcd.chn0);

    EDMA_DRV_StartChannel(&Chn_State.chn0);
}

/**********************************************************
 Configures eDMA channel 1 to transfer ADC0 samples to the
 "Lower" buffer. When the buffer is full, this channel generates
 and interupt.
 **********************************************************/
void config_DMA_Lower(void) {

    Chn_State.chn1.channel = kEDMAChannel1;

    edma_user_config_t edmaUserConfig1;
    edmaUserConfig1.chnArbitration = kEDMAChnArbitrationRoundrobin;
    edmaUserConfig1.notHaltOnError = false;

    edma_state_t edmaState1; //Maybe don't need this?

    EDMA_DRV_Init(&edmaState1, &edmaUserConfig1);

    // Technically everything up to here is redundant and unnecessary.
    // Keeping it for now because it means I can call the upper and lower config functions in any order.

    //request DMA1 - Triggered by ADC0//
    EDMA_DRV_RequestChannel(kEDMAChannel1, kDmaRequestMux0ADC0, &Chn_State.chn1);

    /*********** Configure DMA Channel 1 **************************/
    edma_transfer_config_t edmaTXcfg1;

    edmaTXcfg1.srcAddr = (uint32_t)(&ADC0_RA);  /*!< Memory address pointing to the source data. */
    edmaTXcfg1.destAddr = (uint32_t)(&sampleBuffer[sBufferIdx.lowerBuffer][0]); /*!< Memory address pointing to the destination data. */
    edmaTXcfg1.srcTransferSize = kEDMATransferSize_2Bytes;   /*!< Source data transfer size. */
    edmaTXcfg1.destTransferSize = kEDMATransferSize_2Bytes;  /*!< Destination data transfer size. */
    edmaTXcfg1.srcOffset = 0;         /*!< Sign-extended offset applied to the current source address to
                                        form the next-state value as each source read/write is completed. */
    edmaTXcfg1.destOffset = 2;
    edmaTXcfg1.srcLastAddrAdjust = 0;    /*!< Last source address adjustment. */
    edmaTXcfg1.destLastAddrAdjust = -BUF_SIZE;   /*!< Last destination address adjustment. Note here it is only
    valid when scatter/gather feature is not enabled. */
    edmaTXcfg1.srcModulo = kEDMAModuloDisable;       /*!< Source address modulo. */
    edmaTXcfg1.destModulo = kEDMAModuloDisable;       /*!< Destination address modulo. */
    edmaTXcfg1.minorLoopCount = 2;    /*!< Minor bytes transfer count. Number of bytes to be transferred
    in each service request of the channel. */
    edmaTXcfg1.majorLoopCount = BUF_SIZE/2;    /*!< Major iteration count. */

    /* I think the TCD works this way - The edma_transfer_config_t is a data structure that
    holds settings for the TCD. The edma_software_tcd_t is the actual software TCD.
    EDMA_DRV_PrepareDescriptorTransfer() sets up the software TDC based on the data in
    the edma_transfer_config_t structure.

    This function call configures the rest of stcd.chn1.
    Channel - DMA 1. (true) - Interrupt on TCD Complete; (true) DMA request on TCD complete is disabled */
    EDMA_DRV_PrepareDescriptorTransfer(&Chn_State.chn1, &stcd.chn1, &edmaTXcfg1, true, true);
    EDMA_DRV_PushDescriptorToReg(&Chn_State.chn1, &stcd.chn1);

    /****** Install Callback function for Interrupt **********/
    // EDMA_DRV_InstallCallback(&Chn_State.chn1, IntHandlerDMA1, NULL);
    // This function doesn't work and after looking at the driver I don't see how it could.
    // There is nothing in it to update the g_edma structure. Will just use the default ISR,
    // Since no channel arbitration is needed.

    /******* Start Channels *******/
    EDMA_DRV_StartChannel(&Chn_State.chn1);
}


/****************************************************************
copyActiveToFloat - This function copies the uint16_t ADC samples in
the "Active" buffer into a float buffer normalized to 1.
****************************************************************/
void copyActiveToFloat(float fBuffer[]) {
    uint16_t i = 0;
    for(i; i < BUF_SIZE; i++) {
        fBuffer[i] = ((float)sampleBuffer[sBufferIdx.activeBuffer][i])/4096.0;
        // Normalize 12bit ADC values to 1.
    }
}

/****************************************************************
bufSize - Return the size of the sample Buffers.
****************************************************************/
uint16_t bufSize(void) {
    return (uint16_t)BUF_SIZE;
}

/****************************************************************
DMA1 IRQ Handler - This overrides the default IRQ handler for
eDMA channel 1. It resets the eDMA channels, and cycles the buffers
that they point to.
****************************************************************/
void DMA1_IRQHandler(void)
{
    bufferStatus = 1;

	// (Insert profanity here.) EDMA_DRV_ClearIntStatus() is private so it can only
	// be used by the broken peripheral driver interrupt handler. But, hey, who needs
	// portable code?
    EDMA_HAL_ClearDoneStatusFlag(DMA_BASE_PTR, kEDMAChannel1);
    EDMA_HAL_ClearIntStatusFlag(DMA_BASE_PTR, kEDMAChannel1);
    // Change buffers active -> lower -> upper -> active
    sBufferIdx.activeBuffer = ((sBufferIdx.activeBuffer + 1) % 3);
    sBufferIdx.lowerBuffer = ((sBufferIdx.lowerBuffer + 1) % 3);
    sBufferIdx.upperBuffer = ((sBufferIdx.upperBuffer + 1) % 3);

    /****** Use Hardware TCD ******/
    EDMA_HAL_HTCDSetDestAddr(DMA_BASE_PTR, 0, &sampleBuffer[sBufferIdx.upperBuffer][BUF_SIZE/2]);
    EDMA_HAL_HTCDSetDestAddr(DMA_BASE_PTR, 1, &sampleBuffer[sBufferIdx.lowerBuffer][0]);
    EDMA_HAL_TriggerChannelStart(DMA_BASE_PTR, 0);
    EDMA_HAL_TriggerChannelStart(DMA_BASE_PTR, 1);


    /****** Software TDC - Old *****/
    /*
    EDMA_HAL_STCDSetDestAddr (&stcd.chn0, &sampleBuffer[sBufferIdx.upperBuffer][BUF_SIZE/2]);
    EDMA_HAL_STCDSetDestAddr (&stcd.chn1, &sampleBuffer[sBufferIdx.lowerBuffer][0]);
    EDMA_DRV_PushDescriptorToReg(&Chn_State.chn0, &stcd.chn0);
    EDMA_DRV_PushDescriptorToReg(&Chn_State.chn1, &stcd.chn1);

    EDMA_HAL_HTCDSetDestAddr(DMA_BASE, 0, &sampleBuffer[sBufferIdx.upperBuffer][BUF_SIZE/2]);
    EDMA_HAL_HTCDSetDestAddr(DMA_BASE, 1, &sampleBuffer[sBufferIdx.lowerBuffer][0]);
    EDMA_HAL_TriggerChannelStart(DMA_BASE, 0);
    EDMA_HAL_TriggerChannelStart(DMA_BASE, 1);

    EDMA_DRV_StartChannel(&Chn_State.chn0);
    EDMA_DRV_StartChannel(&Chn_State.chn1);
	*/
}

/*****************************************************************
bufferReady - Returns active buffer ready status flag
*****************************************************************/
uint8_t bufferReady(void) {
    return bufferStatus;
}

/*****************************************************************
buferStatusReset - Clears active buffer ready status flag
*****************************************************************/
void bufferStatusReset(void) {
    bufferStatus = 0;
}
