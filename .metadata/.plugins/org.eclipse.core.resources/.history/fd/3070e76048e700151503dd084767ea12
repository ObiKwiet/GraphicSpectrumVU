/*
 * Copyright (c) 2015, Freescale Semiconductor, Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *
 * o Redistributions of source code must retain the above copyright notice, this list
 *   of conditions and the following disclaimer.
 *
 * o Redistributions in binary form must reproduce the above copyright notice, this
 *   list of conditions and the following disclaimer in the documentation and/or
 *   other materials provided with the distribution.
 *
 * o Neither the name of Freescale Semiconductor, Inc. nor the names of its
 *   contributors may be used to endorse or promote products derived from this
 *   software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
 * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#include "fsl_device_registers.h"
#include "fsl_debug_console.h"
#include "fsl_edma_driver.h"
#include "fsl_adc16_driver.h"
#include "fsl_pdb_driver.h"
#include "fsl_clock_manager.h"
#include "edma_init.h"

#include "arm_math.h"
#include "arm_const_structs.h"

#define SAMPLEFREQ      40000

// This configures channel 0 on adc(instance).
// The instance refers to the actual ADC hardware module, either ADC0 or ADC1
// on the K64F.
// The channel is the pin that is connected to the ADC.
static void init_adc(uint32_t instance) {

	/******** Initialize Data Structures *********/

    //Config
	adc16_converter_config_t userConvConfig;
	adc16_chn_config_t userChnConfig;

    //Calibration
    adc16_calibration_param_t userCalConfig;

    /********* Configure ADC **********/
    // Maximum conversion clock frequency is 18MHz for 12bit, 12MHz for 16bit. Bus frequency is 60.
    // With a clock divider of 4, the ADCK is 15MHz.

    // Set Converter Configuration Values
    userConvConfig.lowPowerEnable = false;
    userConvConfig.clkDividerMode = kAdc16ClkDividerOf4; //
    userConvConfig.longSampleTimeEnable = false;
    userConvConfig.resolution = kAdc16ResolutionBitOf12or13; //12bit for Single Ended Conversion
    userConvConfig.clkSrc = kAdc16ClkSrcOfBusClk;
    userConvConfig.asyncClkEnable = false;
    userConvConfig.highSpeedEnable = true;
    userConvConfig.longSampleCycleMode = kAdc16LongSampleCycleOf24;
    userConvConfig.hwTriggerEnable = true;
    userConvConfig.refVoltSrc = kAdc16RefVoltSrcOfVref;
    userConvConfig.continuousConvEnable = false;
    userConvConfig.dmaEnable = true;

    //Initialize ADC
    ADC16_DRV_Init(instance, &userConvConfig);

    //Calibrate ADC - This are not the optimal settings. To improve, see AN3949
    ADC16_DRV_GetAutoCalibrationParam(instance, &userCalConfig);
    ADC16_DRV_SetCalibrationParam(instance, &userCalConfig);

    //Set Channel Configuration Values
    userChnConfig.chnIdx = kAdc16Chn1d; // DAD1 - ADC0_DP1
    userChnConfig.convCompletedIntEnable = false; // Enable Interrupt on Conversion
    userChnConfig.diffConvEnable = false;

    // Apply Channel Configuration ADC(instance)_SC1A. The 0 selects A.
    ADC16_DRV_ConfigConvChn(instance, 0, &userChnConfig);
}


void config_PDB(void) {

    uint32_t busClock, modValue, countRate;
    pdb_timer_config_t PdbTimerConfig;
    pdb_adc_pretrigger_config_t pdbAdcTriggerConfig;

    //Basic PDB configuration
    PdbTimerConfig.loadValueMode = kPdbLoadValueImmediately;
    PdbTimerConfig.seqErrIntEnable = false;
    PdbTimerConfig.clkPreDiv = kPdbClkPreDivBy1;  //Adjust these multipliers to accommodate modValue
    PdbTimerConfig.clkPreMultFactor = kPdbClkPreMultFactorAs1;
    PdbTimerConfig.triggerInput = kPdbSoftTrigger;
    PdbTimerConfig.continuousModeEnable = true;
    PdbTimerConfig.dmaEnable = false;
    PdbTimerConfig.intEnable = false;
    PdbTimerConfig.seqErrIntEnable = true;
    PDB_DRV_Init(0U, &PdbTimerConfig);

    pdbAdcTriggerConfig.adcPreTriggerIdx = 0U;
    pdbAdcTriggerConfig.preTriggerEnable = true;
    pdbAdcTriggerConfig.preTriggerOutputEnable = true;
    pdbAdcTriggerConfig.preTriggerBackToBackEnable = false;
    PDB_DRV_ConfigAdcPreTrigger(0U, 0U, &pdbAdcTriggerConfig);


    // CLOCK_SYS_GetBusClockFreq(); would be nice here, but it's broken
    // under this clock configureation and it returns 0. I asked about it
    // on the community forum, but it was ignored.
    busClock = 60000000;

    // Get count rate in Hz:
    // countRate = busClock/PdbTimerConfig.clkPreDiv/PdbTimerConfig.clkPreMultFactor;
    // Except you have to manually interpret the values .clkProDiv and clkPreMultFactor because they are coded
    // to a 4 bit word. In this cause busClock/1/1 = busClock.
    countRate = busClock;

    // Get Modulus value for sampling frequency (Must fit in 16bit field)
    modValue = countRate/SAMPLEFREQ;

    PDB_DRV_SetTimerModulusValue(0U, modValue);
    PDB_DRV_SetAdcPreTriggerDelayValue(0U, 0U, 0U, modValue/2);
    PDB_DRV_LoadValuesCmd(0U);
    // Hardware should default to this, but it is added for completeness.
    SIM_HAL_SetAdcAlternativeTriggerCmd(SIM_BASE, 0U, false);

    //Start
    PDB_DRV_SoftTriggerCmd(0);
}
/*
void processFFT(*samples) {
    arm_rfft_fast_instance_f32 S;
    arm_rfft_fast_init_f32(&S, bufSize()/2);  //This initializes twiddle factors and internal structure of the FFT

}
*/
int main(void)
{
	float FFT_Array[bufSize()];

    // Initialize peripherals
    config_DMA_Upper();
    config_DMA_Lower();
    config_PDB();
    init_adc(0);

    // Main Loop
    while(1) {

        // Check if new sample buffer is ready
        while(!bufferReady()) {}
        bufferStatusReset();


        // Convert new sample buffer to float array
        copyActiveToFloat(FFT_Array);

        //processFFT(FFT_Array);
        //formatFrame(FFT_Array);
        //sendData(FFT_Array);







    }

    return 0;
}
////////////////////////////////////////////////////////////////////////////////
// EOF
////////////////////////////////////////////////////////////////////////////////
